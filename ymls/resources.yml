Resources:
  ConfigTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: ${self:service}-${self:provider.stage}-orders
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S

  # Exemplo de como criar um evento para executar o Step Function a cada 10 minutos
  # Lote:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     ScheduleExpression: "cron(0 7 * * ? *)"
  #     State: ENABLED
  #     Targets:
  #       - Arn: arn:aws:states:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:stateMachine:bko-ocr-documents-run-report-lote
  #         Id: "LoteStepFunctionTarget"
  #         RoleArn: "arn:aws:iam::${self:provider.environment.ACCOUNT_ID}:role/bko-eventbridge-role"

  SendOrderSmsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: send-order-sms-policy
      Roles:
        - !Ref IamRoleLambdaExecution
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
              - sns:SetSMSAttributes
            Resource: !Ref OrderSmsTopic

  OrderSmsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ${self:service}-${self:provider.stage}-order-sms
      DisplayName: ${self:service}-${self:provider.stage}-order-sms

  OrderSmsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sns:Publish
            Resource: !Ref OrderSmsTopic
      Topics:
        - !Ref OrderSmsTopic

  CircuitBreakerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:service}-${self:provider.stage}-circuit-breaker
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: serviceName
          AttributeType: S
      KeySchema:
        - AttributeName: serviceName
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  UserLimitsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:service}-${self:provider.stage}-user-limits
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  AuditTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:service}-${self:provider.stage}-audit
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:service}-${self:provider.stage}-dlq
      MessageRetentionPeriod: 1209600  # 14 dias
      VisibilityTimeout: 900  # 15 minutos

  MainQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:service}-${self:provider.stage}-main
      MessageRetentionPeriod: 345600  # 4 dias
      VisibilityTimeout: 900  # 15 minutos
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3

  AuditBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:service}-${self:provider.stage}-audit-logs
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90


